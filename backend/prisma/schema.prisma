// This is your Prisma schema file.
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Cambia a "postgresql" en producción
  url      = env("DATABASE_URL")
}

// Enums
enum EstadoEstudiante {
  Activo
  Inactivo
}

enum EstadoInscripcion {
  Activa
  Inactiva
}

// Catálogos
model Pais {
  id          Int          @id @default(autoincrement())
  nombre      String       @unique
  localidades Localidad[]
  estudiantes Estudiante[]
}

model Localidad {
  id       Int          @id @default(autoincrement())
  nombre   String
  paisId   Int
  pais     Pais         @relation(fields: [paisId], references: [id])
  estudiantes Estudiante[]

  @@unique([nombre, paisId])
}

model AreaTelefonica {
  id     Int          @id @default(autoincrement())
  codigo String       @unique
  estudiantes Estudiante[]
}

model Genero {
  id          Int          @id @default(autoincrement())
  nombre      String       @unique
  estudiantes Estudiante[]
}

model Condicion {
  id                Int                    @id @default(autoincrement())
  nombre            String                 @unique // Ej: "Regular", "Libre"
  condicionesMaterias CondicionMateria[]
}

// Carreras y materias
model Carrera {
  id              Int          @id @default(autoincrement())
  nombre          String       @unique
  duracion        Int          // en años
  tituloOtorgado  String 
  materias        Materia[]
  inscripciones   Inscripcion[]
  estudiantesCarreras EstudianteCarrera[]
}

model Materia {
  id        Int          @id @default(autoincrement())
  nombre    String
  carreraId Int
  carrera   Carrera      @relation(fields: [carreraId], references: [id])
  cursadas  Cursada[]
  condicionesMaterias CondicionMateria[]

  @@unique([nombre, carreraId])
}

// Estudiantes
model Estudiante {
  id                Int               @id @default(autoincrement())
  paisId            Int
  localidadId       Int
  areaTelefonicaId  Int
  generoId          Int

  nombres           String
  apellidos         String
  dni               String            @unique
  fechaNacimiento   DateTime
  email             String
  telefono          String
  domicilio         String
  fechaIngreso      DateTime          @default(now())
  cohorte           String
  secundario        String
  cuil              String
  examenMayores25   Boolean
  solicitoBeca      Boolean
  trabajador        Boolean
  personaACargo     Boolean
  observaciones     String?
  estado            EstadoEstudiante  @default(Activo)

  // Relaciones
  pais              Pais              @relation(fields: [paisId], references: [id])
  localidad         Localidad         @relation(fields: [localidadId], references: [id])
  areaTelefonica    AreaTelefonica    @relation(fields: [areaTelefonicaId], references: [id])
  genero            Genero            @relation(fields: [generoId], references: [id])

  inscripciones     Inscripcion[]
  estudiantesCarreras EstudianteCarrera[]
  cursadas          Cursada[]
  condicionesMaterias CondicionMateria[]
}

// Inscripciones a carreras
model Inscripcion {
  id                Int                 @id @default(autoincrement())
  estudianteId      Int
  carreraId         Int
  fechaInscripcion  DateTime            @default(now())
  estado            EstadoInscripcion   @default(Activa)
  causaInactividad  String?

  estudiante        Estudiante          @relation(fields: [estudianteId], references: [id])
  carrera           Carrera             @relation(fields: [carreraId], references: [id])

  @@unique([estudianteId, carreraId])
}

// Relación muchos a muchos entre estudiantes y carreras (histórico)
model EstudianteCarrera {
  id            Int      @id @default(autoincrement())
  estudianteId  Int
  carreraId     Int
  fechaAlta     DateTime @default(now())
  fechaBaja     DateTime?

  estudiante    Estudiante @relation(fields: [estudianteId], references: [id])
  carrera       Carrera    @relation(fields: [carreraId], references: [id])

  @@unique([estudianteId, carreraId])
}

// Calificaciones (cursadas)
model Cursada {
  id            Int      @id @default(autoincrement())
  estudianteId  Int
  materiaId     Int
  notaFinal     Float?   // SQLite no soporta DECIMAL → usar Float

  estudiante    Estudiante @relation(fields: [estudianteId], references: [id])
  materia       Materia    @relation(fields: [materiaId], references: [id])

  @@unique([estudianteId, materiaId])
}

// Condiciones académicas por materia
model CondicionMateria {
  id            Int      @id @default(autoincrement())
  estudianteId  Int
  materiaId     Int
  condicionId   Int

  estudiante    Estudiante @relation(fields: [estudianteId], references: [id])
  materia       Materia    @relation(fields: [materiaId], references: [id])
  condicion     Condicion  @relation(fields: [condicionId], references: [id])

  @@unique([estudianteId, materiaId])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String   // contraseña hasheada
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  DOCENTE
  PERSONAL
}
